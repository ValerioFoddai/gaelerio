// BudgetPage.vue
<script setup>
import { ref, onMounted } from 'vue'
import { supabase } from '@/lib/supabaseClient'
import { useUserStore } from '@/stores/user'

const categories = ref([])
const budgets = ref([])
const selectedMonth = ref(new Date().toISOString().slice(0, 7)) // YYYY-MM format
const userStore = useUserStore()

const fetchCategories = async () => {
  const { data, error } = await supabase
    .from('expense_categories')
    .select('*')
    .order('name')
  
  if (error) {
    console.error('Error fetching categories:', error)
    return
  }
  
  categories.value = data
}

const fetchBudgets = async () => {
  const { data, error } = await supabase
    .from('budgets')
    .select(`
      *,
      expense_categories (*)
    `)
    .eq('user_id', userStore.user.id)
    .eq('month', selectedMonth.value)
  
  if (error) {
    console.error('Error fetching budgets:', error)
    return
  }
  
  budgets.value = data
}

const updateBudget = async (categoryId, amount) => {
  const { error } = await supabase
    .from('budgets')
    .upsert({
      user_id: userStore.user.id,
      category_id: categoryId,
      month: selectedMonth.value,
      allocated_amount: amount,
    })
    
  if (error) {
    console.error('Error updating budget:', error)
    return
  }
  
  await fetchBudgets()
}

onMounted(() => {
  fetchCategories()
  fetchBudgets()
})
</script>

<template>
  <div class="budget-page">
    <div class="header">
      <h1>Budget Management</h1>
      <input
        type="month"
        v-model="selectedMonth"
        @change="fetchBudgets"
        class="month-picker"
      />
    </div>

    <div class="budget-table">
      <div class="table-header">
        <div>Category</div>
        <div>Budget</div>
        <div>Spent</div>
        <div>Available</div>
        <div>Previous Balance</div>
      </div>

      <template v-for="category in categories" :key="category.id">
        <!-- Main category -->
        <div class="category-row">
          <div class="category-name">
            {{ category.name }}
          </div>
          <div class="amount">
            <input
              type="number"
              v-model="category.budget"
              @change="updateBudget(category.id, category.budget)"
              class="budget-input"
            />
          </div>
          <div class="amount">
            {{ category.spent || '0.00' }} €
          </div>
          <div class="amount" :class="{ 
            'positive': category.available > 0,
            'negative': category.available < 0 
          }">
            {{ category.available || '0.00' }} €
          </div>
          <div class="amount">
            {{ category.previousBalance || '0.00' }} €
          </div>
        </div>

        <!-- Sub-categories -->
        <div 
          v-for="subCategory in category.subCategories" 
          :key="subCategory.id"
          class="subcategory-row"
        >
          <div class="subcategory-name">
            {{ subCategory.name }}
          </div>
          <div class="amount">
            <input
              type="number"
              v-model="subCategory.budget"
              @change="updateBudget(subCategory.id, subCategory.budget)"
              class="budget-input"
            />
          </div>
          <div class="amount">
            {{ subCategory.spent || '0.00' }} €
          </div>
          <div class="amount" :class="{ 
            'positive': subCategory.available > 0,
            'negative': subCategory.available < 0 
          }">
            {{ subCategory.available || '0.00' }} €
          </div>
          <div class="amount">
            {{ subCategory.previousBalance || '0.00' }} €
          </div>
        </div>
      </template>
    </div>
  </div>
</template>

<style scoped>
.budget-page {
  padding: 2rem;
}

.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2rem;
}

.month-picker {
  padding: 0.5rem;
  border: 1px solid #ddd;
  border-radius: 4px;
}

.budget-table {
  border: 1px solid #ddd;
  border-radius: 4px;
}

.table-header {
  display: grid;
  grid-template-columns: 2fr 1fr 1fr 1fr 1fr;
  padding: 1rem;
  background-color: #f5f5f5;
  font-weight: bold;
}

.category-row, .subcategory-row {
  display: grid;
  grid-template-columns: 2fr 1fr 1fr 1fr 1fr;
  padding: 0.75rem 1rem;
  border-top: 1px solid #ddd;
}

.subcategory-row {
  background-color: #f9f9f9;
  padding-left: 2rem;
}

.budget-input {
  width: 100%;
  padding: 0.25rem;
  border: 1px solid #ddd;
  border-radius: 4px;
}

.amount {
  text-align: right;
}

.positive {
  color: #22c55e;
}

.negative {
  color: #ef4444;
}
</style>
